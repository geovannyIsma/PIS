# Generated by Django 5.0.6 on 2024-07-23 22:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ciclo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_ciclo', models.CharField(max_length=50, verbose_name='Nombre del Ciclo')),
            ],
            options={
                'verbose_name': 'Ciclo',
                'verbose_name_plural': 'Ciclos',
            },
        ),
        migrations.CreateModel(
            name='MallaCurricular',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(default='', max_length=50, verbose_name='Código')),
                ('nombre_malla', models.CharField(max_length=80, verbose_name='Nombre de la Malla')),
                ('tituloOtorgado', models.CharField(max_length=100, verbose_name='Título Otorgado')),
            ],
            options={
                'verbose_name': 'Malla Curricular',
                'verbose_name_plural': 'Mallas Curriculares',
            },
        ),
        migrations.CreateModel(
            name='PeriodoAcademico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_periodo', models.CharField(default='', max_length=50, verbose_name='Código de Periodo')),
                ('fecha_inicio', models.DateField(verbose_name='Fecha de Inicio')),
                ('fecha_fin', models.DateField(verbose_name='Fecha de Fin')),
            ],
            options={
                'verbose_name': 'Periodo Académico',
                'verbose_name_plural': 'Periodos Académicos',
            },
        ),
        migrations.CreateModel(
            name='Asignatura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_asignatura', models.CharField(max_length=50, unique=True, verbose_name='Código de Asignatura')),
                ('nombre_asignatura', models.CharField(max_length=100, verbose_name='Nombre de Asignatura')),
                ('ciclo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Prediccion.ciclo', verbose_name='Ciclo')),
            ],
            options={
                'verbose_name': 'Asignatura',
                'verbose_name_plural': 'Asignaturas',
            },
        ),
        migrations.AddField(
            model_name='ciclo',
            name='malla_curricular',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Prediccion.mallacurricular', verbose_name='Malla Curricular'),
        ),
        migrations.CreateModel(
            name='Historico_Periodo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matriculados', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Matriculados')),
                ('reprobados', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Reprobados')),
                ('abandonaron', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Abandonaron')),
                ('aprobados', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Aprobados')),
                ('aplazadores', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Aplazadores')),
                ('desertores', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Desertores')),
                ('periodo_academico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Prediccion.periodoacademico', verbose_name='Periodo Académico')),
            ],
            options={
                'verbose_name': 'Histórico',
                'verbose_name_plural': 'Históricos',
            },
        ),
        migrations.CreateModel(
            name='Historico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matriculados', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Matriculados')),
                ('reprobados', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Reprobados')),
                ('abandonaron', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Abandonaron')),
                ('aprobados', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Aprobados')),
                ('aplazadores', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Aplazadores')),
                ('desertores', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Desertores')),
                ('ciclo', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='Prediccion.ciclo', verbose_name='Ciclo')),
                ('periodo_academico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Prediccion.periodoacademico', verbose_name='Periodo Académico')),
            ],
            options={
                'verbose_name': 'Histórico',
                'verbose_name_plural': 'Históricos',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrador'), ('registered', 'Usuario registrado'), ('unregistered', 'Usuario no registrado')], default='unregistered', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
